#! /usr/bin/env bash

# This script is used to publish a package to PyPi. Assumptions:
#   * Your cwd is the root of the package you want to publish.
#  * You're using setuptools_scm to manage your version number, under git tags.
#  * build dir is dist

get_version() {
  # get the package name
  package_name=$(python setup.py --name 2>/dev/null)
  if [[ -z "$package_name" ]]; then
    echo "Could not determine package name from setuptools_scm."
    exit 1
  fi
  echo "Package name: $package_name"

  # get version from setuptools_scm, __version__ and check if they match
  version=$(python setup.py --version 2>/dev/null)
  if [[ -z "$version" ]] || [[ "$version" == "0.0.0" ]]; then
    echo "Could not determine version from setuptools_scm."
    exit 1
  fi
  # get the version from the package itself in $package_name/__version__.py
    version_from_file=$(python -c "from $package_name.__version__ import __version__; print(__version__)")
    echo "Version from file: $version_from_file"
  if [[ "$version" != "$version_from_file" ]]; then

    echo "Version from setuptools_scm and __version__ do not match."
    exit 1
  fi
  # we've got the version, now let's confirm with the user.
  echo "Current version is $version."
  echo ""

  echo "Do you want to publish this version? (y/n)"
  read -r response
  if [[ "$response" != "y" ]]; then
    echo "Exiting without publishing."
    exit 1
  fi
}

check_if_published() {
  if twine check dist/* | grep -q "$version"; then
    echo "Version $version is already published."
    exit 1
  fi
}

create_and_push_git_tag() {
  if git rev-parse "v$version" >/dev/null 2>&1; then
    echo "Tag v$version already exists."
  else
    git tag "v$version"
  fi
  git push origin "v$version"
}

build_and_publish() {
  rm -rf dist
  python setup.py sdist bdist_wheel
  twine upload dist/*
}

# no arguments, do everything.
# if you want to do only one step, pass the argument , helpful for debugging.
if [ "$1" = "" ]; then
  get_version
  check_if_published
  create_and_push_git_tag
  build_and_publish
elif [ "$1" = "getversion" ]; then
  get_version
elif [ "$1" = "published" ]; then
  check_if_published
elif [ "$1" = "gittag" ]; then
  create_and_push_git_tag
elif [ "$1" = "publish" ]; then
  build_and_publish
else
  echo "Usage: $0 [getversion|published|gittag|publish]"
  exit 1
fi

