#! /usr/bin/env bash

# Usage:
#   pypi::publish
# If debugging, you can run the steps individually:
#   pypi::publish getversion
#   pypi::publish published
#   pypi::publish gittag
#   pypi::publish publish

# This script is used to publish a package to PyPi. Assumptions:
#  * Your cwd is the root of the package you want to publish.
#  * You're using setuptools_scm to manage your version number, under git tags.
#  * build dir is dist
#
#
#  This setup aims to reduce the tasteless repetition of things such the verison number (from __version__, setup.cf, setup.py, pyproject.toml, git). But it does't do away with allo of you. You will need:
#   * __version__.py:  should be in your scm and tagged at any rate.
#   * either setup.py or setup.cfg:
#  The script requires both versions to match, and will prompt you to confirm the version before publishing.

print_error() {
  echo -e "\033[31m$1\033[0m"
}

print_success() {
  echo -e "\033[32m$1\033[0m"
}

get_version() {
  # get the package name
  package_name=$(grep -E '^name\s*=' setup.cfg | cut -d "=" -f2 | xargs)
  if [[ -z "$package_name" ]]; then
    print_error "Could not determine package name from setup.cfg."
    exit 1
  fi
  echo "Package name: $package_name"

  # get version from setup.cfg
  version=$(grep -E '^version\s*=' setup.cfg | cut -d "=" -f2 | xargs)
  if [[ -z "$version" ]]; then
    print_error "Could not determine version from setup.cfg."
    exit 1
  fi
  # get the version from the package itself in $package_name/__version__.py
  version_from_file=$(python -c "from $package_name.__version__ import __version__; print(__version__)")
  echo "Version from file: $version_from_file"
  if [[ "$version" != "$version_from_file" ]]; then
    print_error "Version from setup.cfg($version) and __version__ ($version_from_file) do not match."
    exit 1
  fi
  # we've got the version, now let's confirm with the user.
  echo "Current version is $version."
  echo ""

  echo "Do you want to publish this version? (y/n)"
  read -r response
  if [[ "$response" != "y" ]]; then
    echo "Exiting without publishing."
    exit 1
  fi
}

check_if_published() {
  if twine check dist/* | grep -q "$version"; then
    print_error "Version $version is already published."
    exit 1
  fi
}

create_and_push_git_tag() {
  if git rev-parse "v$version" >/dev/null 2>&1; then
    echo "Tag v$version already exists."
  else
    git tag "v$version"
    print_success "Tag v$version created."
  fi
  git push origin "v$version" && print_success "Tag v$version pushed to origin."
}

open_url_in_browser() {
  url=$1
  if which xdg-open > /dev/null; then
    xdg-open "$url"
  elif which open > /dev/null; then
    open "$url"
  else
    print_error "Could not detect the web browser to open the URL."
  fi
}

build_and_publish() {
  rm -rf dist
  python setup.py sdist bdist_wheel && print_success "Package built successfully."
  output=$(twine upload dist/*)
  print_success "Package published successfully."
  url=$(echo "$output" | grep -o 'https://pypi.org/project/[^ ]*' | sed 's/[^ ]*$/&/')
  echo "Package URL: $url"
}

# no arguments, do everything.
# if you want to do only one step, pass the argument , helpful for debugging.
if [ "$1" = "" ]; then
  get_version
  check_if_published
  create_and_push_git_tag
  build_and_publish
  open_url_in_browser "$url"
elif [ "$1" = "getversion" ]; then
  get_version
elif [ "$1" = "published" ]; then
  check_if_published
elif [ "$1" = "gittag" ]; then
  create_and_push_git_tag
elif [ "$1" = "publish" ]; then
  build_and_publish
  if [ "$url" != "" ]; then
    open_url_in_browser "$url"
  fi
else
  echo "Usage: $0 [getversion|published|gittag|publish]"
  exit 1
fi

