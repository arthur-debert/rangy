#! /usr/bin/env bash

# Usage:
#   pypi::publish
# If debugging, you can run the steps individually:
#   pypi::publish getversion
#   pypi::publish gittag
#   pypi::publish publish

# This script is used to publish a package to PyPi. Assumptions:
#  * Your cwd is the root of the package you want to publish.
#  * You're using setuptools_scm to manage your version number, under git tags.
#  * build dir is dist
#  * Uses pyproject.toml, with the version in __version__.py

print_error() {
  echo -e "\033[31m$1\033[0m"
}

print_success() {
  echo -e "\033[32m$1\033[0m"
}

create_and_push_git_tag() {
  version=$(./scripts/tomlcat project.version)
  if git rev-parse "v$version" >/dev/null 2>&1; then
    echo "Tag v$version already exists."
  else
    git tag "v$version"
    print_success "Tag v$version created."
  fi
  git push origin "v$version" && print_success "Tag v$version pushed to origin."
}

publish_with_poetry() {
  poetry publish --build
}


if [ "$1" = "" ]; then
  create_and_push_git_tag
  publish_with_poetry
elif [ "$1" = "gittag" ]; then
  create_and_push_git_tag
elif [ "$1" = "publish" ]; then
  publish_with_poetry
else
  echo "Usage: $0 [getversion|gittag|publish]"
  exit 1
fi

