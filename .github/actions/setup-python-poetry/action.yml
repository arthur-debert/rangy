name: Setup Python with Poetry

inputs:
  python-version:
    description: 'The Python version to use'
    required: false
    default: '3.x'
  cache-key-prefix:
    description: 'An optional prefix for the cache key'
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Cache Poetry tool
      id: cache-poetry
      uses: actions/cache@v3
      with:
        path: ${{ runner.tool_cache }}/poetry
        key: ${{ inputs.cache-key-prefix }}-${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ inputs.cache-key-prefix }}-${{ runner.os }}-poetry-


    - name: Install Poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: false
        virtualenvs-in-project: true
        installer-parallel: true


    - name: Set virtual environment path
      id: venv-path
      shell: bash
      run: |
        echo "venv-path=$(poetry env info -p)" >> "$GITHUB_OUTPUT"
        echo "venv-activate=$(poetry env info -p)/bin/activate" >> "$GITHUB_OUTPUT"

    - name: Cache virtual environment
      id: cache-venv
      uses: actions/cache@v3
      with:
        path: ${{ steps.venv-path.outputs.venv-path }}
        key: ${{ inputs.cache-key-prefix }}-${{ runner.os }}-venv-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ inputs.cache-key-prefix }}-${{ runner.os }}-venv-${{ inputs.python-version }}-

    - name: Install dependencies
      if: steps.cache-venv.outputs.cache-hit != 'true'
      shell: bash
      run: |
          poetry install --no-interaction --no-root --with dev

    # This should always run to install the project in the venv
    - name: Install project
      shell: bash
      run: poetry install --no-interaction


    - name: Sanity check
      shell: bash
      run: poetry check

