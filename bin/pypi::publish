#! /usr/bin/env bash

usage() {
  echo "Usage: $0 [--version <version>|bump] [--help]"
  echo ""
  echo "Options:"
  echo "  --version <version>  Specify the version to publish. Use 'bump' to auto-increment the patch version."
  echo "  --help               Display this help message."
  echo ""
  echo "Notes:"
  echo "  - If --version is set to 'bump', the script will:"
  echo "    1. Check if the git repository is clean (no uncommitted changes)."
  echo "    2. Call 'poetry version patch' to increment the patch version."
  echo "    3. Add the updated pyproject.toml to the git index and commit it."
  echo "    4. Push the commit to the remote repository."
  echo "  - If --version is not provided, the version must be manually updated in pyproject.toml and committed before running the script."
  echo ""
  echo "Examples:"
  echo "  To publish with a version bump:"
  echo "    $0 --version bump"
}

check_git_clean() {
  if ! git diff-index --quiet HEAD --; then
    echo "Git repository has uncommitted changes. Please commit or stash them before proceeding." && exit 1
  fi
}

check_on_main_branch() {
  local branch
  branch=$(git symbolic-ref --short HEAD)
  if [ "$branch" != "main" ]; then
    echo "You are not on the main branch. Please switch to the main branch before proceeding." && exit 1
  fi
}

bump_version() {
  poetry version patch || exit
  local new_version
  new_version=$(poetry version -s) || exit
  git add pyproject.toml
  echo "$new_version"
}

get_poetry_version() {
  poetry version -s
}

publish() {
  local version="$1"

  # If version not provided via --version, get it from poetry
  if [ -z "$version" ]; then
    version=get_poetry_version
  fi

  # Lock dependencies
  poetry lock || exit

  # Check if we need to commit the new lock file or pyproject.toml
  local commit_needed=false
  if ! git diff-index --quiet HEAD -- pyproject.toml; then
    git add pyproject.toml
    commit_needed=true
  fi
  if ! git diff-index --quiet HEAD -- poetry.lock; then
    git add poetry.lock
    commit_needed=true
  fi
  if [ "$commit_needed" = true ]; then
    git commit -m "Update version to ${version} and lock dependencies"
    git push
  fi

  # Build the package
  if [[ -d "dist" ]]; then
    rm -rf dist
  fi
  poetry build || exit
  poetry run twine upload --repository pypi dist/* || exit

  # Tagging logic
  if git rev-parse "v${version}" >/dev/null 2>&1; then
    echo "Tag v${version} already exists."
  else
    git tag "v$version" && echo "Tag v$version created."
    git push origin "v${version}" && echo "Tag v${version} pushed to origin." || exit
  fi

  # Create a GitHub release
  gh release create "v${version}" --title "v${version}" --notes "Release version ${version}" || exit
  echo "GitHub release v${version} created."
}

# Parse command-line arguments for version and help flag
while [[ $# -gt 0 ]]; do
  case "$1" in
    --version)
      version="$2"
      shift 2
      ;;
    --help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      usage
      exit 1
      ;;
  esac
done

# Ensure the git repository is clean and on the main branch
check_git_clean
check_on_main_branch

# Handle version bump or specific version
if [ "$version" == "bump" ]; then
  bump_version
  version=$(get_poetry_version)
elif [ -n "$version" ]; then
  poetry version "$version" || exit
fi

# If version is still not set, get it from poetry
if [ -z "$version" ]; then
  version=$(get_poetry_version)
fi

# Call the publish function with the parsed arguments
publish "$version"